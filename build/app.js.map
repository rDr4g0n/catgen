{"version":3,"sources":["catcard.js","app.js"],"names":[],"mappingsnfile":"app.js","sourcesContent":["/* jshint esnext: true */\n(function(){\n    \"use strict\";\n\n    var template = Handlebars.compile(`\n        <canvas id=\"kitty\" class=\"portrait\" width=\"360\" height=\"180\"></canvas>\n\n        <div class=\"greeting\">{{model.greeting}}</div>\n\n        {{#if isNew}}\n        <input type=\"text\" class=\"name-input\" placeholder=\"meow!\">\n        <div class=\"actions\">\n            <div class=\"no btn\">✖ No me gusta</div>\n            <div class=\"yes btn\">✓ I like dis one</div>\n        </div>\n\n        {{else}}\n        <div class=\"name\">{{model.name}}</div>\n        {{#if isAlive}}\n        <div class=\"share\">\n            <input class=\"share-link\" value=\"catgen.com/?cat=JR12jDD8fsjdkfHAFjkdsf9808dfsdFJKAJ123f9jdikhja\" readonly onclick=\"this.select();\">\n            <i class=\"share-icon\">★</i>\n        </div>\n        {{/if}}\n        {{/if}}\n    `);\n\n    var ALIVE = \"alive\",\n        DEAD = \"dead\",\n        NEW = \"new\";\n\n\n    var sassycat = {\n        \"missingName\": [\n            \"I need a name buddy\",\n            \"Cmon, gimme a name\",\n            \"You can't just call me undefined\"\n        ],\n        \"dead\": [\n            \"I can change, I swear!\",\n            \"It's not you, its meeeeeee\",\n            \"This actually hurts ya know\",\n            \"MMEEE  OOOOWWW!\",\n            \"I'll find you\",\n            \"ugh. Mondays.\"\n        ],\n        \"alive\": [\n            \"Hey, my name is\",\n            \"My mom calls me\",\n            \"My name is ‱̧͂͐̎̈ͤ̂͊̿̎ͤ͂ͮͫ͢҉̶҉͓̗͙͕̻͖̖, but you can call me\"\n        ]\n    };\n\n    function getSassyText(CATegory){\n        var strings = sassycat[CATegory];\n        return strings[Math.floor(Math.random()*strings.length)];\n    }\n\n    class CatCard {\n\n        constructor(cat){\n            this.el = document.createElement(\"div\");\n            this.el.className = \"cat-card new\";\n\n            if(cat){\n                this.model = cat;\n                this.status = ALIVE;\n            } else {\n                this.model = {\n                    greeting: \"Hi! Will you name me?\" \n                };\n                this.status = NEW;\n            }\n\n            // give event emitter powers\n            eventEmitter.call(this);\n\n            // start listening for model changes\n            Object.observe(this.model, function(changes){\n                this.render();\n            }.bind(this));\n\n            this.attachListeners();\n            this.render();\n        }\n\n        attachListeners(){\n            // probably not the most sensible arrangement\n            var listeners = {\n                \".btn.yes\": this.save,\n                \".btn.no\": this.murder\n            };\n\n            this.el.addEventListener(\"click\", e => {\n                var target = e.target;\n                for(var listener in listeners){\n                    if(target.matches(listener)){\n                        listeners[listener].call(this, e);\n                    }\n                }\n            });\n        }\n\n        render(){\n            // TODO - use getters or something for these props\n            this.isNew = this.checkIsNew();\n            this.isAlive = this.checkIsAlive();\n            this.el.innerHTML = template(this);\n        }\n\n        checkIsNew(){\n            return this.status === NEW;\n        }\n        checkIsAlive(){\n            return this.status === ALIVE;\n        }\n\n        save(){\n            var name = this.el.querySelector(\".name-input\").value;\n\n            if(!name){\n                this.model.greeting = getSassyText(\"missingName\");\n                return;\n            }\n\n            this.status = ALIVE;\n            this.model.name = name;\n            this.model.greeting = getSassyText(\"alive\");\n\n            this.emit(\"saved\", this.model);\n        }\n\n        murder(){\n            this.status = DEAD;\n            this.model.name = \":(\";\n            this.model.greeting = getSassyText(\"dead\");\n\n            this.emit(\"murdered\", this.el);\n        }\n\n        destroy(){\n            // TODO - unbind listeners\n        }\n    }\n\n    window.CatCard = CatCard;\n}());\n","(function(){\n\n    /*\n    var canvas = document.getElementById(\"kitty\"),\n        context = canvas.getContext(\"2d\"),\n        bounds = canvas.getBoundingClientRect(),\n        w = bounds.width,\n        h = bounds.height,\n        centerW = bounds.width / 2,\n        centerH = bounds.height / 2;\n\n    var palette = {\n        primary: \"#171334\",\n        bg: \"#6382B8\",\n        accent: \"#F84F76\"\n    };\n    */\n\n\n\n    window.drawAThing = function(){\n        // bg\n        context.fillStyle = palette.bg;\n        context.fillRect(0, 0, w, h);\n\n        // head\n        context.beginPath();\n        context.arc(centerW, centerH, Math.min(centerW, centerH) - 40, 0, 2 * Math.PI, false);\n        context.fillStyle = palette.primary;\n        context.fill();\n        context.closePath();\n\n        // ears\n        var x0 = centerW - 20,\n            y0 = centerH - 45;\n\n        context.beginPath();\n        context.moveTo(x0, y0);\n        context.lineTo(x0 - 50, y0 - 20);\n        context.lineTo(x0 - 30, y0 + 50);\n        context.fillStyle = palette.primary;\n        context.fill();\n        context.closePath();\n\n        x0 = centerW + 20;\n        y0 = centerH - 45;\n\n        context.beginPath();\n        context.moveTo(x0, y0);\n        context.lineTo(x0 + 50, y0 - 20);\n        context.lineTo(x0 + 30, y0 + 50);\n        context.fillStyle = palette.primary;\n        context.fill();\n        context.closePath();\n\n        // ojos\n        var eyeWidth = 40,\n            halfEyeWidth = eyeWidth / 2,\n            eyeHeight = 70,\n            halfEyeHeight = eyeHeight / 2,\n            eyeSpacing = 30,\n            eyeVerticalPosition = -20;\n\n        x0 = centerW - eyeSpacing;\n        y0 = centerH - eyeVerticalPosition;\n\n        context.beginPath();\n        context.moveTo(x0 - halfEyeWidth, y0);\n        context.bezierCurveTo(x0 - halfEyeWidth, y0, x0, y0 + halfEyeHeight, x0 + halfEyeWidth, y0);\n        context.bezierCurveTo(x0 + halfEyeWidth, y0, x0, y0 - halfEyeHeight, x0 - halfEyeWidth, y0);\n        context.fillStyle = palette.accent;\n        context.fill();\n        context.closePath();\n\n        x0 = centerW + eyeSpacing;\n        y0 = centerH - eyeVerticalPosition;\n\n        context.beginPath();\n        context.moveTo(x0 - halfEyeWidth, y0);\n        context.bezierCurveTo(x0 - halfEyeWidth, y0, x0, y0 + halfEyeHeight, x0 + halfEyeWidth, y0);\n        context.bezierCurveTo(x0 + halfEyeWidth, y0, x0, y0 - halfEyeHeight, x0 - halfEyeWidth, y0);\n        context.fillStyle = palette.accent;\n        context.fill();\n        context.closePath();\n    };\n\n    //drawAThing();\n    \n\n    // TODO - save and load catcards to ls\n    var catCard = new window.CatCard();\n    document.querySelector(\".cards\").appendChild(catCard.el);\n\n    catCard.on(\"murdered\", function(){\n        // give enough time to see a \n        // glimpse of the terror\n        setTimeout(function(){\n            catCard.el.remove();\n            catCard.destroy();\n\n            // TODO - add a new one\n        }, 500);\n    });\n\n    // TODO - on saved, add a new, empty catcard\n\n})();\n"],"sourceRoot":"src"}