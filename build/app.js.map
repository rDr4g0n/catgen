{"version":3,"sources":["catcard.js","app.js"],"names":[],"mappingszLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/* jshint esnext: true */\n(function(){\n    \"use strict\";\n\n    var template = Handlebars.compile(`\n        {{#if message}}\n        <div class=\"modal\">\n            <div class=\"message\">{{{message}}}</div> \n            <div class=\"close\">❌</div>\n        </div>\n        {{/if}}\n\n        <canvas class=\"portrait\" width=\"360\" height=\"180\"></canvas>\n\n        <div class=\"greeting\">{{model.greeting}}</div>\n\n        {{#if isNew}}\n        <input type=\"text\" class=\"name-input\" placeholder=\"meow!\">\n        <div class=\"actions\">\n            <div class=\"no btn\">✖ No me gusta</div>\n            <div class=\"yes btn\">✓ I like this one</div>\n        </div>\n\n        {{else}}\n        <div class=\"name\">{{model.name}}</div>\n        {{#if isAlive}}\n        <div class=\"share\">\n            <input class=\"share-link\" value=\"http://localhost:3006/api/cats/{{model.id}}\" readonly onclick=\"this.select();\">\n            <i class=\"share-icon\">★</i>\n        </div>\n        {{/if}}\n        {{/if}}\n    `);\n\n    var ALIVE = \"alive\",\n        DEAD = \"dead\",\n        NEW = \"new\";\n\n\n    var sassycat = {\n        \"nameme\": [\n            \"Hi! Will you name me?\"\n        ],\n        \"missingName\": [\n            \"I need a name buddy\",\n            \"Cmon, gimme a name\",\n            \"You can't just call me undefined\"\n        ],\n        \"dead\": [\n            \"I can change, I swear!\",\n            \"It's not you, its meeeeeee\",\n            \"This actually hurts ya know\",\n            \"MMEEE  OOOOWWW!\",\n            \"I'll find you\",\n            \"ugh. Mondays.\"\n        ],\n        \"alive\": [\n            \"Hey, my name is\",\n            \"My mom calls me\",\n            \"My name is ‱̧͂͐̎̈ͤ̂͊̿̎ͤ͂ͮͫ͢҉̶҉͓̗͙͕̻͖̖, but you can call me\"\n        ]\n    };\n\n    function getSassyText(CATegory){\n        var strings = sassycat[CATegory];\n        return strings[Math.floor(Math.random()*strings.length)];\n    }\n\n    class CatCard {\n\n        constructor(cat){\n            this.el = document.createElement(\"div\");\n            this.el.className = \"cat-card\";\n\n            if(cat){\n                this.model = cat;\n                this.status = ALIVE;\n            } else {\n                this.model = {\n                    greeting: getSassyText(\"nameme\")\n                };\n                this.status = NEW;\n            }\n\n            // give event emitter powers\n            eventEmitter.call(this);\n\n            // start listening for model changes\n            Object.observe(this.model, function(changes){\n                this.render();\n            }.bind(this));\n\n            this.attachListeners();\n            this.render();\n        }\n\n        attachListeners(){\n            // probably not the most sensible arrangement\n            var listeners = {\n                \".btn.yes\": this.save,\n                \".btn.no\": this.murder,\n                \".modal .close\": this.hideMessage\n            };\n\n            var clickHandler = e => {\n                var target = e.target;\n                for(var listener in listeners){\n                    if(target.matches(listener)){\n                        listeners[listener].call(this, e);\n                    }\n                }\n            };\n            this.el.addEventListener(\"click\", clickHandler);\n\n            // TODO - probably not the nicests\n            this.removeEventListeners = () => {\n                this.el.removeEventListener(\"click\", clickHandler);\n            };\n        }\n\n        render(){\n            // TODO - use getters or something for these props\n            this.isNew = this.checkIsNew();\n            this.isAlive = this.checkIsAlive();\n            this.el.innerHTML = template(this);\n        }\n\n        checkIsNew(){\n            return this.status === NEW;\n        }\n        checkIsAlive(){\n            return this.status === ALIVE;\n        }\n\n        save(){\n            var name = this.el.querySelector(\".name-input\").value;\n\n            if(!name){\n                // disable client side verification\n                //this.model.greeting = getSassyText(\"missingName\");\n                //return;\n            }\n\n            this.status = ALIVE;\n            this.model.name = name;\n            this.model.greeting = getSassyText(\"alive\");\n\n            this.emit(\"saved\", this);\n        }\n\n        murder(){\n            this.status = DEAD;\n            this.model.name = \":(\";\n            this.model.greeting = getSassyText(\"dead\");\n\n            this.emit(\"murdered\", this);\n        }\n\n        // clean up for GC\n        destroy(){\n            this.removeEventListeners();\n            this.off();\n        }\n\n        // keep cat portrait, but mark as new\n        reset(){\n            this.status = NEW;\n            this.model.name = \"\";\n            this.model.greeting = getSassyText(\"nameme\");\n        }\n\n        // shows a little modal message inside\n        // cat card\n        showMessage(message){\n            this.message = message;\n            this.render();\n        }\n        hideMessage(){\n            this.message = \"\";\n            this.render();\n        }\n    }\n\n    window.CatCard = CatCard;\n}());\n","/* jshint esnext: true */\n(function(){\n    // vanilla-ish xhr stuff\n    // TODO - move to a file or something\n    function GET(url){\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url);\n        xhr.send();\n        return waitForResponse(xhr);\n    }\n    function POST(url, data){\n        if(typeof data !== \"string\"){\n            data = JSON.stringify(data);\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url);\n        xhr.send(data);\n        return waitForResponse(xhr);\n    }\n    function waitForResponse(xhr){\n        var deferred = Q.defer();\n        xhr.onreadystatechange = function () {\n            var DONE = 4; // readyState 4 means the request is done.\n            var OK = 200; // status 200 is a successful return.\n            if (xhr.readyState === DONE) {\n                if (xhr.status === OK) {\n                    deferred.resolve(xhr.responseText);\n                } else {\n                    deferred.reject(xhr.status);\n                }\n            }\n        };\n\n        return deferred.promise;\n    }   \n    window.xhr = {\n        GET: GET,\n        POST: POST\n    };\n\n    getCatCards().then(catcards => {\n        catcards.cards.forEach(model => {\n            createCatCard(model, true);\n        });\n        createCatCard(); \n    });\n\n    function saveCatCard(catcard){\n        xhr.POST(\"/api/cats\", catcard.model).then(res => {\n            // TODO - update view\n            createCatCard();\n        })\n        .catch(err => {\n            // changes didnt stick, so \n            // reset the cat\n            catcard.reset();\n            catcard.showMessage(\"<div style='font-size: 3em;'>❇</div><b>Cat Error: error with cat.</b><br> What you do?\");\n        });\n    }\n\n    function getCatCards(){\n        // TODO - handle failure\n        return xhr.GET(\"/api/cats\").then(catcards => JSON.parse(catcards));\n    }\n\n    function createCatCard(model, skipAnimation){\n        var catCard = new window.CatCard(model),\n            cardsEl = document.querySelector(\".cards\");\n\n        cardsEl.insertBefore(catCard.el, cardsEl.firstChild);\n\n        if(!skipAnimation){\n            // do a fancy slide in transition\n            catCard.el.style.height = 0;\n            setTimeout(function(){\n                catCard.el.style.height = \"375px\";\n            }, 0);\n        }\n\n        catCard.on(\"murdered\", function(){\n            // give enough time to see a \n            // glimpse of the terror\n            setTimeout(function(){\n                catCard.el.remove();\n                catCard.destroy();\n                createCatCard();\n            }, 500);\n        });\n\n        catCard.on(\"saved\", saveCatCard);\n\n        return catCard;\n    }\n\n\n})();\n"],"sourceRoot":"src"}